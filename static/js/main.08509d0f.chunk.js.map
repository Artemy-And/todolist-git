{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/app-reducer.tsx","features/TodolistsList/Todolist/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/Todolist/Task/tasks-reducer.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/Todolist/TodolistsList.tsx","components/errorSnackBar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","get","title","post","todolistId","delete","put","taskAPI","taskId","model","auth","data","initialState","status","error","isInitialized","setAppErrorAC","type","setAppStatusAC","v1","handleServerAppError","dispatch","messages","length","message","handleServerNetworkError","addTaskAC","task","updateTaskTC","domainModelMy","getState","tasks","find","t","id","deadline","description","priority","startDate","then","res","resultCode","action","updateTaskAC","catch","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItemHandler","trim","addItem","onChangeHandler","useCallback","e","currentTarget","value","onKeyPressHandler","charCode","TextField","variant","disabled","onChange","onKeyPress","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","saveTitle","onDoubleClick","Task","onTitleChangeHandler","newTitle","changeTaskTitle","key","className","Completed","Checkbox","newIsDoneValue","checked","changeTaskStatus","New","removeTask","Delete","Todolist","demo","useDispatch","useEffect","todoListId","todolist","setTaskAC","items","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","deleteTodolist","removeTodolist","changeTodolistTitle","ChangeTOD","tasksForTodolist","filter","entityStatus","map","Button","TodolistsList","todolists","useSelector","state","isLoggedIn","app","todoList","removeTaskAC","item","createTaskTC","changeStatus","thunk","todolistID","changeTodolistAC","changeTodolistFilterAC","RemoveTodolistAC","addTodoList","addTodoListTC","Grid","container","style","padding","spacing","tl","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","setIsLoggedAC","Login","formik","useFormik","validate","values","errors","email","test","initialValues","password","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","FormControlLabel","control","App","logoHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","rootReducer","combineReducers","stateCopy","copyState","forEach","newTodoList","todolistTasks","store","createStore","applyMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.08509d0f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        \"API-KEY\": \"53444f05-2fd9-4762-9034-1b37fffb3067\"\n    }\n})\n\n\n// api\nexport const todolistAPI = {\n\n\n    getTodolist() {\n        return instance.get<Array<TodolistType>>(`todo-lists/`)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists/`, {title:title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`);\n    }\n    ,\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\n    }\n\n}\n\nexport const taskAPI = {\n\n    getTask<getTaksResponse>(todolistId: string) {\n        return instance.get(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n\n    deleteTask(todolistId: string, taskId: string) {\n\n        return instance.delete(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n    }\n\n}\n// export const authAPI = {\n//     me() {\n//         return instance.get<ResponseType<AuthMeType>>(\"auth/me\")\n//     },\n//     login(data:LoginParamsType){\n//         return instance.post<ResponseType<{userId?:string}>>(\"auth/login\",data)\n//     },\n//     logout(){\n//         return instance.delete<ResponseType>(`auth/login`);\n//     }\n// }\nexport const auth = {\n    authMe(){\n        return instance.get<ResponseType<{id:number,email:string,login:string}>>(`auth/me`)\n    },\n    login(data:loginType){\n        return instance.post<ResponseType<{userId?:number}>>(`auth/login`,data)\n    },\n    logOut(){\n        return instance.delete<ResponseType<{userId?:number}>>(`auth/login`)\n    }\n}\n\n\n\n// types\nexport type loginType = {\n    email:string\n    password:string\n    rememberMe:boolean\n    captcha?:string\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\ntype getTaksResponse = {\n    totalCount: string\n    error: string | null\n    task: TaskType[]\n\n}\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\ntype CreateTodolistResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {\n        item: TodolistType\n    }\n}\ntype UpdateTodolistResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {}\n}\ntype DeleteTodolistResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {}\n}\nexport type ResponseType<D = {}> = {//если D не передавать то он будет путым объектом\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\nexport enum TaskStatuses {\n    New = 0,\n    inProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\n\n\n\n\n\n\n\n\n\n\n","import {TodolistType} from \"../api/todolists-api\";\n\n\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error:null,\n    isInitialized:false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error:action.error}\n        case \"APP/SET-INITIALIZED\":\n            return {...state,isInitialized:action.value}\n        default:\n            return {...state}\n    }\n}\nexport const setAppErrorAC = (error: string|null) => {\n    return {type: 'APP/SET-ERROR', error} as const\n}\nexport const setAppStatusAC = (status: RequestStatusType) => {\n    return {type: 'APP/SET-STATUS', status} as const\n}\nexport const setInitializedAC = (value:boolean)=>{\n    return {type: 'APP/SET-INITIALIZED', value} as const\n}\ntype ActionsType = ReturnType<typeof setAppErrorAC>|ReturnType<typeof setAppStatusAC>\n    |ReturnType<typeof setInitializedAC>\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nexport type InitialStateType = {\n    // происходит ли сейчас взаимодействие с сервером\n    status: RequestStatusType,\n    //если глобальная произойдет мы запишем текст ошибки сюда\n    error:string|null,\n    //true когда приложение проинициализировалось(проверили юзера, настройки)\n    isInitialized:boolean\n}\nexport type setAppStatusActionType = ReturnType<typeof setAppErrorAC>|ReturnType<typeof setAppStatusAC>\n","\n\nimport {v1} from \"uuid\";\nimport {todolistAPI, TodolistType} from \"../../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {RequestStatusType, setAppStatusActionType, setAppErrorAC, setAppStatusAC} from \"../../../app/app-reducer\";\n\n\n\n\nexport let todolistId1 = v1();\nexport let todolistId2 = v1();\n\nconst initialState: Array<TodolistDomainType> = []\n\n\n\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionTypes): Array<TodolistDomainType> => {\n    switch (action.type) {\n\n        case \"REMOVE-TODOLIST\": {\n            return state.filter(tl => tl.id != action.id);\n        }\n        case  \"ADD-TODOLIST\": {\n            const newTodoList: TodolistDomainType = {...action.todolist, filter: 'all', entityStatus:'idle'}\n            return [newTodoList, ...state]\n        }\n        case 'CHANGE-TODOLIST-TITLE': {\n            // return state.map(tl=> tl.id === action.id ? {...tl, title:action.title}: tl)\n            // код до рефакторинга\n            debugger\n            let todolistTasks = state.find(tl => tl.id === action.id)\n            if (todolistTasks) {\n                todolistTasks.title = action.title;\n            }\n            return [...state]\n        }\n        case 'CHANGE-TODOLIST-FILTER': {\n            return state.map(tl=> tl.id === action.id ? {...tl, filter:action.filter}: tl)\n            // код до рефакторинга\n            // let todolist = state.find(tl => tl.id === action.id);\n            // if (todolist) {\n            //     todolist.filter = action.filter;\n            //\n            // }\n            // return [...state]\n        }\n        case \"CHANGE-TODOLIST-ENTITY-STATUS\":\n            return state.map(tl=> tl.id === action.id ? {...tl, entityStatus:action.entityStatus}: tl)\n\n        case \"SET-TODOLIST\": {\n            return action.todoList.map((tl: any) => {\n                return {...tl, filter: \"all\", entityStatus:'idle'}\n            })\n        }\n\n\n        default:\n            return state\n    }\n}\n\n// actions\n\nexport const RemoveTodolistAC = (id: string) => {\n    return {type: 'REMOVE-TODOLIST', id: id} as const\n}\nexport const addTodolistAC = (todolist: TodolistType) => {\n    return {type: \"ADD-TODOLIST\", todolist} as const\n}\nexport const changeTodolistAC = (id: string, title: string) => {\n    return {type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title} as const\n}\nexport const changeTodolistFilterAC = (value: FilterValuesType, id: string) => {\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: id, filter: value} as const\n}\nexport const setTodilistAC = (todoList: Array<TodolistType>) => {\n    return {type: \"SET-TODOLIST\", todoList} as const\n}\nexport const changeTodilistEntitiyStatusAC = (id: string, entityStatus:RequestStatusType) => {\n    return {type: \"CHANGE-TODOLIST-ENTITY-STATUS\", id,entityStatus} as const\n}\n\n\n\n//thunks\nexport const fetchTodoListTC = () => {\n    return (dispatch: ThunkDispatchType) => {\n        dispatch(setAppStatusAC(\"loading\"))\n        todolistAPI.getTodolist()\n            .then((res) => {\n                debugger\n                dispatch(setTodilistAC(res.data))\n                dispatch(setAppStatusAC(\"succeeded\"))\n\n            })\n            .catch((error)=>{\n                dispatch(setAppErrorAC(error.message))\n                dispatch(setAppStatusAC('failed'))\n            })\n    }\n}\n\nexport const removeTodoListTC = (todolistId: string) => {\n    return (dispatch: ThunkDispatchType) => {\n        dispatch(setAppStatusAC(\"loading\"))\n        dispatch(changeTodilistEntitiyStatusAC(todolistId, 'loading'))\n\n        todolistAPI.deleteTodolist(todolistId)\n            .then((res) => {\n                dispatch(RemoveTodolistAC(todolistId))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            })\n    }\n}\n\nexport const addTodoListTC = (title: string) => {\n    return (dispatch: ThunkDispatchType) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistAPI.createTodolist(title)\n            .then((res) => {\n                debugger\n                dispatch(addTodolistAC(res.data.data.item))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\n\nexport const changeTodolistTC = (todolistId: string, title: string) => {\n    debugger\n    return (dispatch: ThunkDispatchType) => {\n        todolistAPI.updateTodolist(todolistId, title)\n            .then((res) => {\n                dispatch(changeTodolistAC(todolistId, title))\n            })\n    }\n}\n\n// types\n\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type SetTodolistActionType = ReturnType<typeof setTodilistAC>\ntype ActionTypes =\n    ReturnType<typeof RemoveTodolistAC>\n    | ReturnType<typeof addTodolistAC>\n    | ReturnType<typeof changeTodolistAC>\n    | ReturnType<typeof changeTodolistFilterAC>\n    | ReturnType<typeof setTodilistAC>\n    |   ReturnType<typeof setAppStatusAC>\n    |   ReturnType<typeof setAppErrorAC>\n    |   ReturnType<typeof changeTodilistEntitiyStatusAC>\n\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus:RequestStatusType\n}\ntype ThunkDispatchType = Dispatch<ActionTypes | setAppStatusActionType>\n\n\n","import {setAppErrorAC, setAppStatusAC, setAppStatusActionType} from '../app/app-reducer';\nimport { Dispatch } from 'redux';\nimport { ResponseType } from '../api/todolists-api';\n\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n    if (data.messages.length) {\n        let message = data.messages[0]\n        dispatch(setAppErrorAC(message))\n    } else {\n        dispatch(setAppErrorAC('some error occured'))\n        dispatch(setAppStatusAC('failed'))\n    }\n}\n\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\n    dispatch(setAppErrorAC(error.message? error.message:'some error was occured'))\n    dispatch(setAppStatusAC('failed'))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<setAppStatusActionType>","import {AddTodolistActionType, setTodilistAC, SetTodolistActionType} from \"../todolists-reducer\";\nimport {taskAPI, TaskPriorities, TaskStatuses, TaskType, UpdateTaskType} from \"../../../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../../../../app/store\";\nimport {setAppStatusActionType, setAppErrorAC, setAppStatusAC} from \"../../../../app/app-reducer\";\nimport {Simulate} from \"react-dom/test-utils\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../../utils/error-utils\";\n\n\n\nlet initialState: TasksStateType = {}\n\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionTypes): TasksStateType => {\n    let stateCopy = {...state}\n    switch (action.type) {\n        case \"REMOVE-TASK\":\n            stateCopy[action.todolistId] = stateCopy[action.todolistId].filter(task => task.id !== action.taskId)\n            return stateCopy\n        case  \"ADD-TASK\":\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        //\n        // const newTask = action.task//копируем\n        // const tasks = stateCopy[newTask.todoListId]//берем новую таску\n        // const newTasks = [newTask, ...tasks]//делаем копию массива\n        // stateCopy[newTask.todoListId] = newTasks\n        // return stateCopy\n        case 'UPDATE-TASK':\n            debugger\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case\"ADD-TODOLIST\":\n            return {\n                ...state,\n                [action.todolist.id]: []\n            }\n        case \"REMOVE-TODOLIST\":\n            delete stateCopy[action.id]\n            return stateCopy\n        case \"SET-TODOLIST\": {\n            const copyState = {...state}\n            action.todoList.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n        }\n        case \"SET-TASK\": {\n            const stateCopy = {...state}\n            stateCopy[action.todoListId] = action.tasks\n            return stateCopy\n            //короткаая запись\n            // return {...state,[action.todoListId]:action.tasks}\n        }\n        default:\n            return state\n    }\n}\n\n\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\n    return {type: \"REMOVE-TASK\", taskId, todolistId} as const\n}\nexport const addTaskAC = (todolistId: string, task: TaskType) => {\n    return {type: \"ADD-TASK\", todolistId, task} as const\n}\n\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\n    return {type: \"CHANGE-TITLE-TASK\", taskId: taskId, todolistId: todolistId, title: title} as const\n}\nexport const RemoveTodolistAC = (id: string) => {\n    return {type: \"REMOVE-TODOLIST\", id: id} as const\n}\nexport const setTaskAC = (tasks: Array<TaskType>, todoListId: string) => {\n    return {type: \"SET-TASK\", tasks, todoListId} as const\n}\n\n\nexport const getTaskTC = (todoListId: string) => {\n    return (dispatch: ThunkDispatchType) => {\n        dispatch(setAppStatusAC('loading'))\n        taskAPI.getTask(todoListId)\n            .then((res) => {\n                dispatch(setTaskAC(res.data.items, todoListId))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            })\n    }\n}\n\nexport const deleteTaskTC = (taskId: string, todoListId: string) => {\n    return (dispatch: ThunkDispatchType) => {\n        dispatch(setAppStatusAC('loading'))\n        taskAPI.deleteTask(todoListId, taskId)\n            .then((res) => {\n\n                dispatch(removeTaskAC(taskId, todoListId))\n                dispatch(setAppStatusAC(\"succeeded\"))\n            })\n    }\n}\nexport const createTaskTC = (title: string, todolistId: string) => {\n    return (dispatch: ThunkDispatchType) => {\n        dispatch(setAppStatusAC('loading'))\n        taskAPI.createTask(todolistId, title)\n            .then((res) => {\n                if (res.data.resultCode === 0) {\n                    const tasks = res.data.data.item\n                    const action = addTaskAC(todolistId, tasks)\n                    dispatch(action)\n                    dispatch(setAppStatusAC(\"succeeded\"))\n                } else {\n                    if (res.data.messages.length) {\n                        let message = res.data.messages[0]\n                        dispatch(setAppErrorAC(message))\n                    } else {\n                        dispatch(setAppErrorAC('some error occured'))\n                        dispatch(setAppStatusAC('failed'))\n                    }\n                }\n            })\n            .catch((error)=>{\n                dispatch(setAppErrorAC(error.message))\n                dispatch(setAppStatusAC('failed'))\n            })\n    }\n}\n\n\nexport const changeTaskStatusTC = (title: string, todolistId: string) => {\n\n    return (dispatch: ThunkDispatchType) => {\n        dispatch(setAppStatusAC('loading'))\n        taskAPI.createTask(todolistId, title)\n\n            .then((res) => {\n\n                const tasks = res.data.data.item\n                const action = addTaskAC(todolistId, tasks)\n                dispatch(action)\n                dispatch(setAppStatusAC(\"succeeded\"))\n            })\n    }\n}\n\n\nexport const updateTaskTC = (taskId: string, domainModelMy: UpdateDomainTaskModelType, todolistId: string) => {\n\n    return (dispatch: ThunkDispatchType, getState: () => AppRootStateType) => {\n\n        const state = getState();\n        const task = state.tasks[todolistId].find(t => t.id);\n        if (!task) {\n            console.warn('таска не найдена')\n            return;\n        }\n        const model: UpdateTaskType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModelMy\n        }\n        taskAPI.updateTask(todolistId, taskId, model)\n            .then((res) => {\n                if (res.data.resultCode === 0){\n                    const action = updateTaskAC(taskId, domainModelMy, todolistId)\n                    dispatch(action)\n\n                }else{\n                    handleServerAppError(res.data,dispatch)\n\n                }\n\n\n            })\n            .catch((error)=>{\n                handleServerNetworkError(error,dispatch)\n\n            })\n    }\n}\n\n\n//types\n\n\ntype ActionTypes =\n    ReturnType<typeof addTaskAC>\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | ReturnType<typeof changeTaskTitleAC>\n    | ReturnType<typeof RemoveTodolistAC>\n    | AddTodolistActionType\n    | ReturnType<typeof setTaskAC>\n    | SetTodolistActionType\n    | ReturnType<typeof setTodilistAC>\n\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ThunkDispatchType = Dispatch<ActionTypes | setAppStatusActionType>","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\n\ntype AddItemFormType = {\n    addItem: (title: string) => void\n    disabled?:boolean\n}\n\nconst AddItemForm = React.memo((props:AddItemFormType)=>{\n    console.log('add item form')\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n\n    const addItemHandler = () => {\n\n        if (title.trim() !== \"\") {\n            props.addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    },[])\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null){\n            setError(null);\n        }\n\n        if (e.charCode === 13) {\n            addItemHandler();\n        }\n    },[])\n\n    return (\n\n\n        <div>\n            <TextField\n                variant=\"outlined\"\n                value={title}\n                disabled={props.disabled}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   error={!!error}\n                label=\"Title\"\n                helperText={error}\n            />\n            {/*<Button*/}\n            {/*    variant=\"contained\"*/}\n            {/*    color=\"primary\"*/}\n            {/*    onClick={addItem}*/}\n            {/*>+</Button>*/}\n\n\n            <IconButton color=\"primary\" onClick={addItemHandler}\n                        disabled={props.disabled}>\n                <AddBox />!\n            </IconButton>\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\n        </div>\n    )\n})\n\n\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\n\ntype EditableSpanType = {\n    title: string\n    saveTitle: (newTitle: string) => void\n}\n\n\nconst EditableSpan = React.memo((props: EditableSpanType) => {\n    console.log(\"Ediable span\")\n    let [editMode, setEditMode] = useState<boolean>(false);\n    let [title, setTitle] = useState(props.title)\n    const activatedEditMode = () => {\n        setEditMode(true);\n\n    }\n    const disActivatedEditMode = () => {\n        setEditMode(false);\n        props.saveTitle(title)\n        setTitle(\"\")\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n\n    return (\n        editMode\n            ? <TextField\n                variant=\"outlined\"\n                value={title}\n                onChange={changeTitle}\n                autoFocus={true}\n                onBlur={disActivatedEditMode}/>\n            : <span onDoubleClick={activatedEditMode}>{props.title}</span>\n    )\n})\n\nexport default EditableSpan","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\n\n\ntype TaskPropsType = {\n    tasks: TaskType\n    removeTask: (taskId: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status:TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (title: string, id: string, todolistId: string) => void\n    taskId: string\n\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n\n    const onClickHandler = () => props.removeTask(props.tasks.id, props.taskId)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        props.changeTaskStatus(props.tasks.id, newIsDoneValue? TaskStatuses.Completed:TaskStatuses.New, props.taskId);\n    }\n    const onTitleChangeHandler = useCallback((newTitle: string) => {\n        props.changeTaskTitle(props.tasks.id, newTitle, props.taskId);\n    },[props.changeTaskTitle,props.tasks.id,props.taskId])\n\n    return <div key={props.tasks.id} className={props.tasks.status === TaskStatuses.Completed? \"is-done\" : \"\"}>\n        <Checkbox color=\"primary\" onChange={onChangeHandler} checked={props.tasks.status === TaskStatuses.Completed}/>\n        <EditableSpan title={props.tasks.title} saveTitle={onTitleChangeHandler}/>\n\n\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from \"./../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"./../../../components/EditableSpan/EditableSpan\"\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses, TaskType} from \"./../../../api/todolists-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"./todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTaskTC} from \"./Task/tasks-reducer\";\r\n\r\n// export type TaskType = {\r\n//     id: string\r\n//     title: string\r\n//     status:TaskStatuses\r\n// }\r\n\r\ntype PropsType = {\r\n    todolist:TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status:TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTaskTitle: (title: string, id: string, todolistId: string) => void\r\n    ChangeTOD: (newTitle: string, todolistID: string) => void,\r\n    demo?:boolean\r\n}\r\n\r\nexport const Todolist = React.memo(({demo=false,...props}:PropsType) => {//такая запись DEMO\r\n    console.log('todolist')\r\n   // if (typeof props.demo === 'undefined') props.demo = false // такая запись\r\n\r\nconst dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        if (demo){return\r\n        }\r\n        dispatch(getTaskTC(props.todolist.id))\r\n    },[])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n// const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.todolist.id), [props.changeFilter, props.todolist.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.todolist.id), [props.changeFilter, props.todolist.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.todolist.id), [props.changeFilter, props.todolist.id]);\r\n    const deleteTodolist = useCallback(() => props.removeTodolist(props.todolist.id), [props.removeTodolist, props.todolist.id])\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.ChangeTOD(title, props.todolist.id)\r\n    }, [props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n\r\n        <h3>\r\n            <EditableSpan title={props.todolist.title} saveTitle={changeTodolistTitle}/>\r\n\r\n            <IconButton onClick={deleteTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t =>\r\n                    <Task changeTaskTitle={props.changeTaskTitle}\r\n                          changeTaskStatus={props.changeTaskStatus}\r\n                          removeTask={props.removeTask}\r\n                          tasks={t}\r\n                          taskId={props.todolist.id}\r\n                          key={t.id}/>\r\n                )\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.todolist.filter === 'all' ? \"contained\" : \"text\"}\r\n                    onClick={onAllClickHandler}\r\n                    color=\"inherit\"\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? \"contained\" : \"text\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color=\"primary\"\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? \"contained\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color=\"secondary\"\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../app/store\";\nimport {\n    addTodoListTC,\n    changeTodolistFilterAC,\n    changeTodolistTC,\n    fetchTodoListTC,\n    FilterValuesType, removeTodoListTC,\n    TodolistDomainType\n} from \"./todolists-reducer\";\nimport {createTaskTC, deleteTaskTC, TasksStateType, updateTaskTC} from \"./Task/tasks-reducer\";\nimport {TaskStatuses} from \"../../../api/todolists-api\";\nimport {Grid} from \"@material-ui/core\";\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {Todolist} from \"./TodoList\"\nimport { Redirect } from \"react-router-dom\";\n\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\n    const dispatch = useDispatch();\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n\n    // useEffect(() => {\n    //     if (demo||!isInitialized) {\n    //         return\n    //     }\n    //     dispatch(fetchTodoListTC())\n    // }, [])\n    useEffect(() => {\n        if (demo||!isLoggedIn) {\n            return\n        }\n        dispatch(fetchTodoListTC())\n    }, [])\n\n    const removeTask = useCallback((id: string, todolistId: string) => {\n\n        dispatch(deleteTaskTC(id, todolistId))\n    }, [dispatch])\n    const addTask = useCallback((title: string, todolistId: string) => {\n\n        dispatch(createTaskTC(title, todolistId))\n    }, [dispatch])\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\n        const thunk = updateTaskTC(id, {status}, todolistId)\n        dispatch(thunk)\n    }, [dispatch])\n    const changeTaskTitle = useCallback((id: string, title: string, todolistId: string) => {\n        const action = updateTaskTC(id, {title}, todolistId)\n        dispatch(action)\n\n\n    }, [dispatch])\n    const ChangeTOD = useCallback((newTitle: string, todolistID: string) => {\n\n        const thunk = changeTodolistTC(todolistID, newTitle)\n        dispatch(thunk)\n    }, [dispatch])\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\n        dispatch(changeTodolistFilterAC(value, todolistId))\n    }, [dispatch])\n    const removeTodolist = useCallback((id: string) => {\n\n        dispatch(removeTodoListTC(id))\n\n\n    }, [dispatch])\n    const addTodoList = useCallback((title: string) => {\n\n        dispatch(addTodoListTC(title))\n\n\n    }, [dispatch])\n\n    if (!isLoggedIn){\n        return <Redirect to={'/login'}/>\n    }\n    return <> <Grid container style={{padding: \"10px\"}}>\n        <AddItemForm addItem={addTodoList}/>\n    </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id];\n                    let tasksForTodolist = allTodolistTasks;\n\n                    return <Grid item>\n                        <Paper style={{padding: \"10px\"}}>\n                            <Todolist\n                                key={tl.id}\n                                todolist={tl}\n                                tasks={tasksForTodolist}\n                                removeTask={removeTask}\n                                changeFilter={changeFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeStatus}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                ChangeTOD={ChangeTOD}\n                                demo={demo}\n                            />\n                        </Paper>\n                    </Grid>\n                })\n            }\n        </Grid></>\n}\n","import React from 'react';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\n\nfunction Alert(props: any) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nexport function ErrorSnackbar() {\n\n\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n   const dispatch = useDispatch()\n\n    const handleClick = () => {\n        //setOpen(true);\n    };\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC(null))\n\n    };\n\n    const isOpen = error !== null\n\n    return (\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\n            <Alert onClose={handleClose}>{error}</Alert>\n        </Snackbar>\n\n\n    );\n}","import {setAppErrorAC, setAppStatusAC, setInitializedAC} from \"../../app/app-reducer\";\nimport {Dispatch} from \"redux\";\nimport {auth, loginType, todolistAPI} from \"../../api/todolists-api\";\nimport {setTodilistAC} from \"../TodolistsList/Todolist/todolists-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\n\nconst initialState: InitialStateType = {\n    isLoggedIn: false\n}\n\nexport const authReducer = (state:InitialStateType=initialState,action:ActionsType):InitialStateType=>{\n    switch (action.type){\n        case \"login/SET-IS-LOGGED-IN\":\n            return {...state,isLoggedIn:action.value}\n        default:\n            return state\n    }\n}\n\n\n//actions\nconst setIsLoggedAC = (value:boolean)=>({type:'login/SET-IS-LOGGED-IN',value}as const)\n\n//thunk\n\nexport const initializedAppTC = ()=>(dispatch:ThunkDispatchType)=>{\n    auth.authMe().then((res)=>{\n        if (res.data.resultCode === 0){\n            dispatch(setIsLoggedAC(true))\n\n        } else {\n\n        }\n        dispatch(setInitializedAC(true))\n    })\n}\nexport const loginTC = (data: loginType) => (dispatch: ThunkDispatchType) => {\n    dispatch(setAppStatusAC('loading'))\n    auth.login(data)\n        .then((res)=>{\n            if (res.data.resultCode === 0 ){\n                dispatch(setIsLoggedAC(true))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data,dispatch)\n            }\n\n        })\n        .catch((error)=>{\n            handleServerNetworkError(error,dispatch)\n        })\n}\n\nexport const logoutTC = ()=>(dispatch:ThunkDispatchType)=>{\n    dispatch(setAppStatusAC('loading'))\n    auth.logOut()\n        .then(res=>{\n            if (res.data.resultCode === 0){\n                dispatch(setIsLoggedAC(false))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data,dispatch)\n            }\n        })\n        .catch((error)=>{\n            handleServerNetworkError(error,dispatch)\n        })\n}\n\n// export const fetchTodoListTC = () => {\n//     return (dispatch: ThunkDispatchType) => {\n//         dispatch(setAppStatusAC(\"loading\"))\n//         todolistAPI.getTodolist()\n//             .then((res) => {\n//                 dispatch(setTodilistAC(res.data))\n//                 dispatch(setAppStatusAC(\"succeeded\"))\n//             })\n//     }\n// }\n\n\n//types\n\n\ntype InitialStateType={\n    isLoggedIn:boolean\n}\nexport type ActionsType = ReturnType<typeof setIsLoggedAC>|ReturnType<typeof setAppErrorAC>\ntype InitializedType = ReturnType<typeof setInitializedAC>\n\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\ntype ThunkDispatchType = Dispatch<ActionsType | setAppStatusActionType|InitializedType>","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {Redirect} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\n\n\n\n\n\nexport const Login = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n    const formik = useFormik({\n        validate :(values: any) => {\n            const errors: any = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            return errors;\n        },\n\n        // validate:(values) => {\n        //     if (!values.email){\n        //         return {\n        //             email:'not correct email'\n        //         }\n        //     }\n        //     if (!values.password){\n        //         return {\n        //             email:'not correct password'\n        //         }\n        //     }\n        // },\n            initialValues: {\n                email: '',\n                password:'',\n                rememberMe:false\n            },\n            onSubmit: values => {\n            dispatch(loginTC(values))\n            },\n        })\n    if (isLoggedIn){\n        return <Redirect to={'/'}/>\n    }\n\n\n    return (<Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n            <FormControl>\n                <FormLabel>\n                    <p>To log in get registered\n                        <a href={'https://social-network.samuraijs.com/'}\n                           target={'_blank'}>here\n                        </a>\n                    </p>\n                    <p>or use common test account credentials:</p>\n                    <p>Email: free@samuraijs.com</p>\n                    <p>Password: free</p>\n                </FormLabel>\n\n                <FormGroup>\n                    <TextField\n                        label=\"Email\"\n                        margin=\"normal\"\n                        {...formik.getFieldProps('email')}\n                    />\n                    {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n                    <TextField\n                        type=\"password\"\n                        label=\"Password\"\n                        margin=\"normal\"\n                        {...formik.getFieldProps('password')}\n                    />\n                    {formik.errors.password ? <div>{formik.errors.password}</div> : null}\n                    <FormControlLabel\n                        label={'Remember me'}\n                        control={<Checkbox\n                            {...formik.getFieldProps('RememberMe')}/>}\n                        checked={formik.values.rememberMe}\n\n                    />\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                </FormGroup>\n            </FormControl>\n            </form>\n        </Grid>\n    </Grid>)\n}\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\n\nimport {\n    AppBar,\n    Toolbar,\n    IconButton,\n    Typography,\n    Button,\n    Container,\n    LinearProgress,\n    CircularProgress\n} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\"\nimport {TodolistsList} from \"../features/TodolistsList/Todolist/TodolistsList\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {RequestStatusType} from \"./app-reducer\";\n\nimport {ErrorSnackbar} from \"../components/errorSnackBar/ErrorSnackbar\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport {Login} from \"../features/Login/Login\";\nimport {initializedAppTC, logoutTC} from \"../features/Login/auth-reducer\";\n\n\n// export type TasksStateType = {\n//     [key: string]: Array<TaskType>\n// }\ntype PropsType = {\n    demo?: boolean\n}\n\nconst App = React.memo(({demo = false}: PropsType) => {\n    console.log('APP with REDUX')\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(initializedAppTC())\n    },[])\n    const logoHandler=useCallback(()=>{\n        dispatch(logoutTC())\n    },[])\n    // if (!isInitialized) { Колесо загрузки, на гите оно постоянно крутится\n    //     return <div\n    //         style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n    //         <CircularProgress/>\n    //     </div>\n    // }\n\n    return (\n        <BrowserRouter>\n            <div className=\"App\">\n                <ErrorSnackbar/>\n                <AppBar position=\"static\">\n\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <Menu/>\n                        </IconButton>\n                        <Typography variant=\"h6\">\n                            News\n                        </Typography>\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoHandler}>Log out</Button>}\n\n                    </Toolbar>\n                    {status === 'loading' && <LinearProgress/>}\n\n                </AppBar>\n\n                <Container fixed>\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\n                    <Route path={'/login'} render={() => <Login/>}/>\n\n\n                </Container>\n\n\n            </div>\n        </BrowserRouter>\n\n\n    );\n})\n\nexport default App;\n\n","import {tasksReducer} from \"../features/TodolistsList/Todolist/Task/tasks-reducer\"\nimport {todolistsReducer} from '../features/TodolistsList/Todolist/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app:appReducer,\n    auth:authReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer,applyMiddleware(thunk));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/App';\r\nimport { store } from './app/store';\r\nimport {Provider} from \"react-redux\"\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}