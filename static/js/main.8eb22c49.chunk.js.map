{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Task/tasks-reducer.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/Todolist/todolists-reducer.ts","trash/App.tsx","features/TodolistsList/Todolist/TodolistsList.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","onChangeHandler","useCallback","e","currentTarget","value","onKeyPressHandler","charCode","TextField","variant","onChange","onKeyPress","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","saveTitle","onDoubleClick","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","get","post","todolistId","delete","put","taskAPI","taskId","model","Task","onTitleChangeHandler","newTitle","changeTaskTitle","tasks","id","key","className","status","Completed","Checkbox","newIsDoneValue","checked","changeTaskStatus","New","removeTask","Delete","initialState","addTaskAC","task","type","updateTaskTC","domainModelMy","dispatch","getState","find","t","deadline","description","priority","startDate","then","res","action","updateTaskAC","warn","Todolist","useDispatch","useEffect","todoListId","setTaskAC","data","items","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","deleteTodolist","removeTodolist","changeTodolistTitle","ChangeTOD","tasksForTodolist","filter","map","Button","v1","App","TodolistsList","todolists","useSelector","state","todoList","removeTaskAC","item","createTaskTC","changeStatus","thunk","todolistID","changeTodolistAC","changeTodolistFilterAC","addTodoList","todolist","addTodolistAC","addTodoListTC","Grid","container","style","padding","spacing","tl","Paper","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","rootReducer","combineReducers","stateCopy","copyState","forEach","newTodoList","todolistTasks","store","createStore","applyMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.8eb22c49.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        \"API-KEY\": \"53444f05-2fd9-4762-9034-1b37fffb3067\"\n    }\n})\n\n\n// api\nexport const todolistAPI = {\n\n    getTodolist() {\n        return instance.get<Array<TodolistType>>(`todo-lists/`)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists/`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`);\n    }\n    ,\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\n    }\n\n}\n\nexport const taskAPI = {\n\n    getTask<getTaksResponse>(todolistId: string) {\n        return instance.get(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n\n    deleteTask(todolistId: string, taskId: string) {\n\n        return instance.delete(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n    }\n\n}\n\n// types\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\ntype getTaksResponse = {\n    totalCount: string\n    error: string | null\n    task: TaskType[]\n\n}\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\ntype CreateTodolistResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {\n        item: TodolistType\n    }\n}\ntype UpdateTodolistResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {}\n}\ntype DeleteTodolistResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {}\n}\ntype ResponseType<D = {}> = {//если D не передавать то он будет путым объектом\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\nexport enum TaskStatuses {\n    New = 0,\n    inProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\n\n\n\n\n\n\n\n\n\n\n","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\nimport {Button, IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\n\ntype AddItemFormType = {\n    addItem: (title: string) => void\n}\n\nconst AddItemForm = React.memo((props: AddItemFormType)=>{\n    console.log('add item form')\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n\n    const addItem = () => {\n\n        if (title.trim() !== \"\") {\n            props.addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    },[])\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null){\n            setError(null);\n        }\n\n        if (e.charCode === 13) {\n            addItem();\n        }\n    },[])\n\n    return (\n\n\n        <div>\n            <TextField\n                variant=\"outlined\"\n                value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   error={!!error}\n                label=\"Title\"\n                helperText={error}\n            />\n            {/*<Button*/}\n            {/*    variant=\"contained\"*/}\n            {/*    color=\"primary\"*/}\n            {/*    onClick={addItem}*/}\n            {/*>+</Button>*/}\n\n\n            <IconButton color=\"primary\"\n                        onClick={addItem}>\n                <AddBox />!\n            </IconButton>\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\n        </div>\n    )\n})\n\n\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\n\ntype EditableSpanType = {\n    title: string\n    saveTitle: (newTitle: string) => void\n}\n\n\nconst EditableSpan = React.memo((props: EditableSpanType) => {\n    console.log(\"Ediable span\")\n    let [editMode, setEditMode] = useState<boolean>(false);\n    let [title, setTitle] = useState(props.title)\n    const activatedEditMode = () => {\n        setEditMode(true);\n\n    }\n    const disActivatedEditMode = () => {\n        setEditMode(false);\n        props.saveTitle(title)\n        setTitle(\"\")\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n\n    return (\n        editMode\n            ? <TextField\n                variant=\"outlined\"\n                value={title}\n                onChange={changeTitle}\n                autoFocus={true}\n                onBlur={disActivatedEditMode}/>\n            : <span onDoubleClick={activatedEditMode}>{props.title}</span>\n    )\n})\n\nexport default EditableSpan","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\n\n\ntype TaskPropsType = {\n    tasks: TaskType\n    removeTask: (taskId: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status:TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (title: string, id: string, todolistId: string) => void\n    taskId: string\n\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n\n    const onClickHandler = () => props.removeTask(props.tasks.id, props.taskId)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        props.changeTaskStatus(props.tasks.id, newIsDoneValue? TaskStatuses.Completed:TaskStatuses.New, props.taskId);\n    }\n    const onTitleChangeHandler = useCallback((newTitle: string) => {\n        props.changeTaskTitle(props.tasks.id, newTitle, props.taskId);\n    },[props.changeTaskTitle,props.tasks.id,props.taskId])\n\n    return <div key={props.tasks.id} className={props.tasks.status === TaskStatuses.Completed? \"is-done\" : \"\"}>\n        <Checkbox color=\"primary\" onChange={onChangeHandler} checked={props.tasks.status === TaskStatuses.Completed}/>\n        <EditableSpan title={props.tasks.title} saveTitle={onTitleChangeHandler}/>\n\n\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})","import {AddTodolistActionType, setTodilistAC, SetTodolistActionType} from \"../todolists-reducer\";\nimport {taskAPI, TaskPriorities, TaskStatuses, TaskType, UpdateTaskType} from \"../../../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../../../../app/store\";\n\n\nlet initialState: TasksStateType = {}\n\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionTypes): TasksStateType => {\n    let stateCopy = {...state}\n    switch (action.type) {\n        case \"REMOVE-TASK\":\n            stateCopy[action.todolistId] = stateCopy[action.todolistId].filter(task => task.id !== action.taskId)\n            return stateCopy\n        case  \"ADD-TASK\":\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        //\n        // const newTask = action.task//копируем\n        // const tasks = stateCopy[newTask.todoListId]//берем новую таску\n        // const newTasks = [newTask, ...tasks]//делаем копию массива\n        // stateCopy[newTask.todoListId] = newTasks\n        // return stateCopy\n        case 'UPDATE-TASK':\n            debugger\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case\"ADD-TODOLIST\":\n            return {\n                ...state,\n                [action.todolist.id]: []\n            }\n        case \"REMOVE-TODOLIST\":\n            delete stateCopy[action.id]\n            return stateCopy\n        case \"SET-TODOLIST\": {\n            const copyState = {...state}\n            action.todoList.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n        }\n        case \"SET-TASK\": {\n            const stateCopy = {...state}\n            stateCopy[action.todoListId] = action.tasks\n            return stateCopy\n            //короткаая запись\n            // return {...state,[action.todoListId]:action.tasks}\n        }\n        default:\n            return state\n    }\n}\n\n\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\n    return {type: \"REMOVE-TASK\", taskId, todolistId} as const\n}\nexport const addTaskAC = (todolistId: string, task: TaskType) => {\n    return {type: \"ADD-TASK\", todolistId, task} as const\n}\n\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => {\n    return {type: \"CHANGE-TITLE-TASK\", taskId: taskId, todolistId: todolistId, title: title} as const\n}\nexport const RemoveTodolistAC = (id: string) => {\n    return {type: \"REMOVE-TODOLIST\", id: id} as const\n}\nexport const setTaskAC = (tasks: Array<TaskType>, todoListId: string) => {\n    return {type: \"SET-TASK\", tasks, todoListId} as const\n}\n\n\nexport const getTaskTC = (todoListId: string) => {\n    return (dispatch: Dispatch) => {\n        taskAPI.getTask(todoListId)\n            .then((res) => {\n                dispatch(setTaskAC(res.data.items, todoListId))\n            })\n    }\n}\n\nexport const deleteTaskTC = (taskId: string, todoListId: string) => {\n    return (dispatch: Dispatch<ActionTypes>) => {\n        taskAPI.deleteTask(todoListId, taskId)\n            .then((res) => {\n\n                dispatch(removeTaskAC(taskId, todoListId))\n            })\n    }\n}\nexport const createTaskTC = (title: string, todolistId: string) => {\n    debugger\n    return (dispatch: Dispatch<ActionTypes>) => {\n        taskAPI.createTask(todolistId, title)\n            .then((res) => {\n                debugger\n                const tasks = res.data.data.item\n                const action = addTaskAC(todolistId, tasks)\n                dispatch(action)\n            })\n    }\n}\nexport const changeTaskStatusTC = (title: string, todolistId: string) => {\n    debugger\n    return (dispatch: Dispatch<ActionTypes>) => {\n        taskAPI.createTask(todolistId, title)\n\n            .then((res) => {\n                debugger\n                const tasks = res.data.data.item\n                const action = addTaskAC(todolistId, tasks)\n                dispatch(action)\n            })\n    }\n}\n\n\nexport const updateTaskTC = (taskId: string, domainModelMy: UpdateDomainTaskModelType, todolistId: string) => {\n    debugger\n    return (dispatch: Dispatch<ActionTypes>, getState: () => AppRootStateType) => {\n        const state = getState();\n        const task = state.tasks[todolistId].find(t => t.id);\n        if (!task) {\n            console.warn('таска не найдена')\n            return;\n        }\n\n        const model: UpdateTaskType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModelMy\n        }\n        taskAPI.updateTask(todolistId, taskId, model)\n            .then((res) => {\n                debugger\n                const action = updateTaskAC(taskId, domainModelMy, todolistId)\n                dispatch(action)\n            })\n    }\n}\n\n\n//types\n\n\ntype ActionTypes =\n    ReturnType<typeof addTaskAC>\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | ReturnType<typeof changeTaskTitleAC>\n    | ReturnType<typeof RemoveTodolistAC>\n    | AddTodolistActionType\n    | ReturnType<typeof setTaskAC>\n    | SetTodolistActionType\n|ReturnType<typeof setTodilistAC>\n\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from \"./../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"./../../../components/EditableSpan/EditableSpan\"\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses, TaskType} from \"./../../../api/todolists-api\";\r\nimport {FilterValuesType} from \"./todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTaskTC} from \"./Task/tasks-reducer\";\r\n\r\n// export type TaskType = {\r\n//     id: string\r\n//     title: string\r\n//     status:TaskStatuses\r\n// }\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status:TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    filter: FilterValuesType\r\n    changeTaskTitle: (title: string, id: string, todolistId: string) => void\r\n    ChangeTOD: (newTitle: string, todolistID: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('todolist')\r\n\r\nconst dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        dispatch(getTaskTC(props.id))\r\n    },[])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n\r\n    }, [props.addTask, props.id])\r\n\r\n// const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.id), [props.changeFilter, props.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.id), [props.changeFilter, props.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.id), [props.changeFilter, props.id]);\r\n    const deleteTodolist = useCallback(() => props.removeTodolist(props.id), [props.removeTodolist, props.id])\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.ChangeTOD(title, props.id)\r\n    }, [props.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n\r\n        <h3>\r\n            <EditableSpan title={props.title} saveTitle={changeTodolistTitle}/>\r\n\r\n            <IconButton onClick={deleteTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t =>\r\n                    <Task changeTaskTitle={props.changeTaskTitle}\r\n                          changeTaskStatus={props.changeTaskStatus}\r\n                          removeTask={props.removeTask}\r\n                          tasks={t}\r\n                          taskId={props.id}\r\n                          key={t.id}/>\r\n                )\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.filter === 'all' ? \"contained\" : \"text\"}\r\n                    onClick={onAllClickHandler}\r\n                    color=\"inherit\"\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? \"contained\" : \"text\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color=\"primary\"\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? \"contained\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color=\"secondary\"\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {} from \"../../../trash/App\";\n\nimport {v1} from \"uuid\";\nimport {todolistAPI, TodolistType} from \"../../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\n\n\n\n\nexport let todolistId1 = v1();\nexport let todolistId2 = v1();\n\nconst initialState: Array<TodolistDomainType> = []\n\n\n\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionTypes): Array<TodolistDomainType> => {\n    switch (action.type) {\n\n        case \"REMOVE-TODOLIST\": {\n            return state.filter(tl => tl.id != action.id);\n        }\n        case  \"ADD-TODOLIST\": {\n            const newTodoList: TodolistDomainType = {...action.todolist, filter: 'all'}\n            return [newTodoList, ...state]\n        }\n        case 'CHANGE-TODOLIST-TITLE': {\n            // return state.map(tl=> tl.id === action.id ? {...tl, title:action.title}: tl)\n            // код до рефакторинга\n            debugger\n            let todolistTasks = state.find(tl => tl.id === action.id)\n            if (todolistTasks) {\n                todolistTasks.title = action.title;\n            }\n            return [...state]\n        }\n        case 'CHANGE-TODOLIST-FILTER': {\n            return state.map(tl=> tl.id === action.id ? {...tl, filter:action.filter}: tl)\n            // код до рефакторинга\n            // let todolist = state.find(tl => tl.id === action.id);\n            // if (todolist) {\n            //     todolist.filter = action.filter;\n            //\n            // }\n            // return [...state]\n        }\n        case \"SET-TODOLIST\": {\n            return action.todoList.map((tl: any) => {\n                return {...tl, filter: \"all\"}\n            })\n        }\n\n\n        default:\n            return state\n    }\n}\n\n// actions\n\nexport const RemoveTodolistAC = (id: string) => {\n    return {type: 'REMOVE-TODOLIST', id: id} as const\n}\nexport const addTodolistAC = (todolist: TodolistType) => {\n    return {type: \"ADD-TODOLIST\", todolist} as const\n}\nexport const changeTodolistAC = (id: string, title: string) => {\n    return {type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title} as const\n}\nexport const changeTodolistFilterAC = (value: FilterValuesType, id: string) => {\n    return {type: \"CHANGE-TODOLIST-FILTER\", id: id, filter: value} as const\n}\nexport const setTodilistAC = (todoList: Array<TodolistType>) => {\n    return {type: \"SET-TODOLIST\", todoList} as const\n}\n\n//thunks\nexport const fetchTodoListTC = () => {\n    return (dispatch: Dispatch<ActionTypes>) => {\n        todolistAPI.getTodolist()\n            .then((res) => {\n                dispatch(setTodilistAC(res.data))\n            })\n    }\n}\n\nexport const removeTodoListTC = (todolistId: string) => {\n    return (dispatch: Dispatch<ActionTypes>) => {\n        todolistAPI.deleteTodolist(todolistId)\n            .then((res) => {\n                dispatch(RemoveTodolistAC(todolistId))\n            })\n    }\n}\n\nexport const addTodoListTC = (title: string) => {\n    return (dispatch: Dispatch<ActionTypes>) => {\n        todolistAPI.createTodolist(title)\n            .then((res) => {\n                const todolist = res.data.data.item\n                dispatch(addTodolistAC(todolist))\n            })\n    }\n}\n\nexport const changeTodolistTC = (todolistId: string, title: string) => {\n    debugger\n    return (dispatch: Dispatch<ActionTypes>) => {\n        todolistAPI.updateTodolist(todolistId, title)\n            .then((res) => {\n                dispatch(changeTodolistAC(todolistId, title))\n            })\n    }\n}\n\n// types\n\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type SetTodolistActionType = ReturnType<typeof setTodilistAC>\ntype ActionTypes =\n    ReturnType<typeof RemoveTodolistAC>\n    | ReturnType<typeof addTodolistAC>\n    | ReturnType<typeof changeTodolistAC>\n    | ReturnType<typeof changeTodolistFilterAC>\n    | ReturnType<typeof setTodilistAC>\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n}\n\n\n\n","import React, {useState} from 'react';\r\nimport '../app/App.css';\r\nimport {Todolist} from '../features/TodolistsList/Todolist/TodoList';\r\nimport {v1} from 'uuid';\r\nimport AddItemForm from \"../components/AddItemForm/AddItemForm\";\r\nimport {AppBar, Toolbar, IconButton, Typography, Button, Container, Grid} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\"\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {TaskPriorities, TaskStatuses, TaskType} from \"../api/todolists-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"../features/TodolistsList/Todolist/todolists-reducer\";\r\n\r\n\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n    let todolistId1 = v1();\r\n    let todolistId2 = v1();\r\n\r\n    let [todolists, setTodolists] = useState<Array<TodolistDomainType>>([\r\n        {id: todolistId1, title: \"What to learn\", filter: \"all\", addedDate: '', order: 0},\r\n        {id: todolistId2, title: \"What to buy\", filter: \"all\", addedDate: '', order: 0}\r\n    ])\r\n\r\n    let [tasks, setTasks] = useState<TasksStateType>({\r\n        [todolistId1]: [\r\n            {\r\n                id: v1(), title: \"HTML&CSS\", status: TaskStatuses.Completed,\r\n                todoListId: todolistId1, description: '', startDate: '',\r\n                deadline: \"\", addedDate: '', order: 0, priority: TaskPriorities.Low\r\n            },\r\n            {\r\n                id: v1(), title: \"JS\", status: TaskStatuses.Completed,\r\n                todoListId: todolistId1, description: '', startDate: '',\r\n                deadline: \"\", addedDate: '', order: 0, priority: TaskPriorities.Low\r\n            }\r\n        ],\r\n        [todolistId2]: [\r\n\r\n            {\r\n                id: v1(), title: \"Milk\", status: TaskStatuses.Completed,\r\n                todoListId: todolistId2, description: '', startDate: '',\r\n                deadline: \"\", addedDate: '', order: 0, priority: TaskPriorities.Low\r\n            },\r\n            {\r\n                id: v1(), title: \"React Book\", status: TaskStatuses.Completed,\r\n                todoListId: todolistId2, description: '', startDate: '',\r\n                deadline: \"\", addedDate: '', order: 0, priority: TaskPriorities.Low\r\n            }\r\n        ]\r\n    });\r\n\r\n    function ChangeTOD(newTitle: string, todolistID: string) {\r\n        let todolistTasks = todolists.find(tl => tl.id === todolistID)\r\n        if (todolistTasks) {\r\n            todolistTasks.title = newTitle;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n\r\n    function removeTask(id: string, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста отфилтрованным массивом:\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id != id);\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTask(title: string, todolistId: string) {\r\n        let task = {\r\n            id: v1(), title: title, status: TaskStatuses.New,\r\n            todoListId: todolistId1, description: '', startDate: '',\r\n            deadline: \"\", addedDate: '', order: 0, priority: TaskPriorities.Low\r\n        };\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // перезапишем в этом объекте массив для нужного тудулиста копией, добавив в начало новую таску:\r\n        tasks[todolistId] = [task, ...todolistTasks];\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function changeStatus(id: string, status: TaskStatuses, todolistId: string) {\r\n        //достанем нужный массив по todolistId:\r\n        let todolistTasks = tasks[todolistId];\r\n        // найдём нужную таску:\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        //изменим таску, если она нашлась\r\n        if (task) {\r\n            task.status = status;\r\n            // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n            setTasks({...tasks});\r\n        }\r\n    }\r\n\r\n    function changeFilter(value: FilterValuesType, todolistId: string) {\r\n        let todolist = todolists.find(tl => tl.id === todolistId);\r\n        if (todolist) {\r\n            todolist.filter = value;\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n    function removeTodolist(id: string) {\r\n        // засунем в стейт список тудулистов, id которых не равны тому, который нужно выкинуть\r\n        setTodolists(todolists.filter(tl => tl.id != id));\r\n        // удалим таски для этого тудулиста из второго стейта, где мы храним отдельно таски\r\n        delete tasks[id]; // удаляем св-во из объекта... значением которого являлся массив тасок\r\n        // засетаем в стейт копию объекта, чтобы React отреагировал перерисовкой\r\n        setTasks({...tasks});\r\n    }\r\n\r\n    function addTodoList(title: string) {\r\n        let newTodoListId = v1();\r\n        let newTodolist: TodolistDomainType = {\r\n            id: newTodoListId, title: title, filter: \"all\", addedDate: \"\",\r\n            order: 0\r\n        }\r\n        setTodolists([newTodolist, ...todolists]);\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodoListId]: []\r\n        })\r\n\r\n    }\r\n\r\n    function changeTaskTitle(id: string, title: string, todolistId: string) {\r\n        let todolistTasks = tasks[todolistId];\r\n        let task = todolistTasks.find(t => t.id === id);\r\n        if (task) {\r\n            task.title = title;\r\n        }\r\n        setTasks({...tasks})\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"App\">\r\n\r\n            <AppBar position=\"static\">\r\n\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"10px\"}}>\r\n                    <AddItemForm addItem={addTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n                            let tasksForTodolist = allTodolistTasks;\r\n\r\n                            if (tl.filter === \"active\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.status === TaskStatuses.New);\r\n                            }\r\n                            if (tl.filter === \"completed\") {\r\n                                tasksForTodolist = allTodolistTasks.filter(t => t.status === TaskStatuses.Completed);\r\n                            }\r\n                            return <Grid item>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        key={tl.id}\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={tasksForTodolist}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        ChangeTOD={ChangeTOD}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n\r\n\r\n            </Container>\r\n\r\n\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","import React, {useCallback, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../app/store\";\nimport {\n    addTodoListTC,\n    changeTodolistFilterAC,\n    changeTodolistTC,\n    fetchTodoListTC,\n    FilterValuesType, removeTodoListTC,\n    TodolistDomainType\n} from \"./todolists-reducer\";\nimport {createTaskTC, deleteTaskTC, TasksStateType, updateTaskTC} from \"./Task/tasks-reducer\";\nimport {TaskStatuses} from \"../../../api/todolists-api\";\nimport {Grid} from \"@material-ui/core\";\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {Todolist} from \"./TodoList\"\n\n\ntype TodolistsListType = {\n    // todolists:Array<TodolistDomainType>\n}\n\nexport const TodolistsList: React.FC<TodolistsListType> = (props) => {\n    const dispatch = useDispatch();\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n\n    useEffect(() => {\n        dispatch(fetchTodoListTC())\n    }, [])\n\n    const removeTask = useCallback((id: string, todolistId: string) => {\n\n        dispatch(deleteTaskTC(id, todolistId))\n    }, [dispatch])\n    const addTask = useCallback((title: string, todolistId: string) => {\n\n        dispatch(createTaskTC(title, todolistId))\n    }, [dispatch])\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\n        const thunk = updateTaskTC(id, {status}, todolistId)\n        dispatch(thunk)\n    }, [dispatch])\n    const changeTaskTitle = useCallback((id: string, title: string, todolistId: string) => {\n        const action = updateTaskTC(id, {title}, todolistId)\n        dispatch(action)\n\n\n    }, [dispatch])\n    const ChangeTOD = useCallback((newTitle: string, todolistID: string) => {\n\n        const thunk = changeTodolistTC(todolistID, newTitle)\n        dispatch(thunk)\n    }, [dispatch])\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\n        dispatch(changeTodolistFilterAC(value, todolistId))\n    }, [dispatch])\n    const removeTodolist = useCallback((id: string) => {\n\n        dispatch(removeTodoListTC(id))\n\n\n    }, [dispatch])\n    const addTodoList = useCallback((title: string) => {\n\n        dispatch(addTodoListTC(title))\n\n\n    }, [dispatch])\n\n\n    return <> <Grid container style={{padding: \"10px\"}}>\n        <AddItemForm addItem={addTodoList}/>\n    </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id];\n                    let tasksForTodolist = allTodolistTasks;\n\n                    return <Grid item>\n                        <Paper style={{padding: \"10px\"}}>\n                            <Todolist\n                                key={tl.id}\n                                id={tl.id}\n                                title={tl.title}\n                                tasks={tasksForTodolist}\n                                removeTask={removeTask}\n                                changeFilter={changeFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeStatus}\n                                filter={tl.filter}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                ChangeTOD={ChangeTOD}\n                            />\n                        </Paper>\n                    </Grid>\n                })\n            }\n        </Grid></>\n}\n","import React from 'react';\nimport './App.css';\n\nimport {AppBar, Toolbar, IconButton, Typography, Button, Container} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\"\nimport {TodolistsList} from \"../features/TodolistsList/Todolist/TodolistsList\";\n\n\n\n\n\n\n\n// export type TasksStateType = {\n//     [key: string]: Array<TaskType>\n// }\n\n\nconst App = React.memo(() => {\n    console.log('APP with REDUX')\n\n    // const dispatch = useDispatch();\n    // const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    // const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    //\n    // useEffect(() => {\n    //     dispatch(fetchTodoListTC())\n    // }, [])\n    //\n    // const removeTask = useCallback((id: string, todolistId: string) => {\n    //     // const action = removeTaskAC(id, todolistId)\n    //     // dispatch(action)\n    //     // const action = taskAPI.deleteTask(id,todolistId)\n    //     // dispatch(action)\n    //     dispatch(deleteTaskTC(id, todolistId))\n    // }, [dispatch])\n    // const addTask = useCallback((title: string, todolistId: string) => {\n    //     // const action = addTaskAC(title, todolistId);\n    //     // dispatch(action)\n    //     dispatch(createTaskTC(title, todolistId))\n    // }, [dispatch])\n    // const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\n    //     const thunk = updateTaskTC(id, {status}, todolistId)\n    //     dispatch(thunk)\n    // }, [dispatch])\n    // const changeTaskTitle = useCallback((id: string, title: string, todolistId: string) => {\n    //     const action = updateTaskTC(id, {title}, todolistId)\n    //     dispatch(action)\n    //\n    //\n    // }, [dispatch])\n    // const ChangeTOD = useCallback((newTitle: string, todolistID: string) => {\n    //     // const action = changeTodolistAC(todolistID, newTitle)\n    //     // dispatch(action)\n    //     const thunk = changeTodolistTC(todolistID, newTitle)\n    //     dispatch(thunk)\n    // }, [dispatch])\n    // const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\n    //     dispatch(changeTodolistFilterAC(value, todolistId))\n    // }, [dispatch])\n    // const removeTodolist = useCallback((id: string) => {\n    //     // let action = RemoveTodolistAC(id)\n    //     // dispatch(action)\n    //     dispatch(removeTodoListTC(id))\n    //\n    //\n    // }, [dispatch])\n    // const addTodoList = useCallback((title: string) => {\n    //     // const action = addTodolistAC(title)\n    //     // dispatch(action);\n    //     dispatch(addTodoListTC(title))\n    //\n    //\n    // }, [dispatch])\n    //\n\n    return (\n\n        <div className=\"App\">\n\n            <AppBar position=\"static\">\n\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container fixed>\n                <TodolistsList />\n                {/*<Grid container style={{padding: \"10px\"}}>*/}\n                {/*    <AddItemForm addItem={addTodoList}/>*/}\n                {/*</Grid>*/}\n                {/*<Grid container spacing={3}>*/}\n                {/*    {*/}\n                {/*        todolists.map(tl => {*/}\n                {/*            let allTodolistTasks = tasks[tl.id];*/}\n                {/*            let tasksForTodolist = allTodolistTasks;*/}\n\n                {/*            return <Grid item>*/}\n                {/*                <Paper style={{padding: \"10px\"}}>*/}\n                {/*                    <Todolist*/}\n                {/*                        key={tl.id}*/}\n                {/*                        id={tl.id}*/}\n                {/*                        title={tl.title}*/}\n                {/*                        tasks={tasksForTodolist}*/}\n                {/*                        removeTask={removeTask}*/}\n                {/*                        changeFilter={changeFilter}*/}\n                {/*                        addTask={addTask}*/}\n                {/*                        changeTaskStatus={changeStatus}*/}\n                {/*                        filter={tl.filter}*/}\n                {/*                        removeTodolist={removeTodolist}*/}\n                {/*                        changeTaskTitle={changeTaskTitle}*/}\n                {/*                        ChangeTOD={ChangeTOD}*/}\n                {/*                    />*/}\n                {/*                </Paper>*/}\n                {/*            </Grid>*/}\n                {/*        })*/}\n                {/*    }*/}\n                {/*</Grid>*/}\n\n\n            </Container>\n\n\n        </div>\n\n\n    );\n})\n\n// type TodolistsListType = {\n//     // todolists:Array<TodolistDomainType>\n// }\n//\n// const TodolistsList:React.FC<TodolistsListType> = (props) => {\n//     const dispatch = useDispatch();\n//     const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n//     const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n//\n//     useEffect(() => {\n//         dispatch(fetchTodoListTC())\n//     }, [])\n//\n//     const removeTask = useCallback((id: string, todolistId: string) => {\n//         // const action = removeTaskAC(id, todolistId)\n//         // dispatch(action)\n//         // const action = taskAPI.deleteTask(id,todolistId)\n//         // dispatch(action)\n//         dispatch(deleteTaskTC(id, todolistId))\n//     }, [dispatch])\n//     const addTask = useCallback((title: string, todolistId: string) => {\n//         // const action = addTaskAC(title, todolistId);\n//         // dispatch(action)\n//         dispatch(createTaskTC(title, todolistId))\n//     }, [dispatch])\n//     const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\n//         const thunk = updateTaskTC(id, {status}, todolistId)\n//         dispatch(thunk)\n//     }, [dispatch])\n//     const changeTaskTitle = useCallback((id: string, title: string, todolistId: string) => {\n//         const action = updateTaskTC(id, {title}, todolistId)\n//         dispatch(action)\n//\n//\n//     }, [dispatch])\n//     const ChangeTOD = useCallback((newTitle: string, todolistID: string) => {\n//         // const action = changeTodolistAC(todolistID, newTitle)\n//         // dispatch(action)\n//         const thunk = changeTodolistTC(todolistID, newTitle)\n//         dispatch(thunk)\n//     }, [dispatch])\n//     const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\n//         dispatch(changeTodolistFilterAC(value, todolistId))\n//     }, [dispatch])\n//     const removeTodolist = useCallback((id: string) => {\n//         // let action = RemoveTodolistAC(id)\n//         // dispatch(action)\n//         dispatch(removeTodoListTC(id))\n//\n//\n//     }, [dispatch])\n//     const addTodoList = useCallback((title: string) => {\n//         // const action = addTodolistAC(title)\n//         // dispatch(action);\n//         dispatch(addTodoListTC(title))\n//\n//\n//     }, [dispatch])\n//\n//\n//\n//\n//     return <> <Grid container style={{padding: \"10px\"}}>\n//         <AddItemForm addItem={addTodoList}/>\n//     </Grid>\n//         <Grid container spacing={3}>\n//             {\n//                 todolists.map(tl => {\n//                     let allTodolistTasks = tasks[tl.id];\n//                     let tasksForTodolist = allTodolistTasks;\n//\n//                     return <Grid item>\n//                         <Paper style={{padding: \"10px\"}}>\n//                             <Todolist\n//                                 key={tl.id}\n//                                 id={tl.id}\n//                                 title={tl.title}\n//                                 tasks={tasksForTodolist}\n//                                 removeTask={removeTask}\n//                                 changeFilter={changeFilter}\n//                                 addTask={addTask}\n//                                 changeTaskStatus={changeStatus}\n//                                 filter={tl.filter}\n//                                 removeTodolist={removeTodolist}\n//                                 changeTaskTitle={changeTaskTitle}\n//                                 ChangeTOD={ChangeTOD}\n//                             />\n//                         </Paper>\n//                     </Grid>\n//                 })\n//             }\n//         </Grid></>\n// }\n\nexport default App;\n\n","import {tasksReducer} from \"../features/TodolistsList/Todolist/Task/tasks-reducer\"\nimport {todolistsReducer} from '../features/TodolistsList/Todolist/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunk from \"redux-thunk\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer,applyMiddleware(thunk));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/App';\r\nimport { store } from './app/store';\r\nimport {Provider} from \"react-redux\"\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}