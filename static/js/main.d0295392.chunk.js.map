{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/app-reducer.tsx","features/TodolistsList/Todolist/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/Todolist/Task/tasks-reducer.tsx","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/TodoList.tsx","features/TodolistsList/Todolist/TodolistsList.tsx","components/errorSnackBar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","withCredentials","baseURL","headers","todolistAPI","get","title","post","todolistId","delete","put","taskAPI","taskId","model","auth","data","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setAppErrorAC","state","action","payload","setAppStatusAC","setInitializedAC","value","actions","appReducer","reducer","v1","removeTodolistAC","index","findIndex","tl","id","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","setTodilistAC","todoList","map","changeTodilistEntitiyStatusAC","todolistsReducer","handleServerAppError","dispatch","messages","length","message","handleServerNetworkError","removeTaskAC","tasks","task","addTaskAC","todoListId","updateTaskAC","setTaskAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","domainModelMy","getState","find","t","deadline","description","priority","startDate","then","res","resultCode","catch","console","warn","AddItemForm","React","memo","props","log","useState","setTitle","setError","addItemHandler","trim","addItem","onChangeHandler","useCallback","e","currentTarget","onKeyPressHandler","charCode","TextField","variant","disabled","onChange","onKeyPress","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","saveTitle","onDoubleClick","Task","onTitleChangeHandler","newTitle","changeTaskTitle","key","className","Completed","Checkbox","newIsDoneValue","checked","changeTaskStatus","New","removeTask","Delete","Todolist","demo","useDispatch","useEffect","items","addTask","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","deleteTodolist","removeTodolist","changeTodolistTitle","ChangeTOD","tasksForTodolist","Button","TodolistsList","todolists","useSelector","isLoggedIn","app","item","createTaskTC","changeStatus","thunk","todolistID","addTodoList","addTodoListTC","Grid","container","style","padding","spacing","Paper","to","Alert","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","setIsLoggedAC","authReducer","Login","formik","useFormik","validate","values","errors","email","test","initialValues","password","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","type","FormControlLabel","control","App","logoHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d0295392.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from \"axios\";\n\nconst instance = axios.create({\n    withCredentials: true,\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    headers: {\n        \"API-KEY\": \"53444f05-2fd9-4762-9034-1b37fffb3067\"\n    }\n})\n\n\n// api\nexport const todolistAPI = {\n\n\n    getTodolist() {\n        return instance.get<Array<TodolistType>>(`todo-lists/`)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{ item: TodolistType }>>(`todo-lists/`, {title:title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}`);\n    }\n    ,\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${todolistId}`, {title})\n    }\n\n}\n\nexport const taskAPI = {\n\n    getTask<getTaksResponse>(todolistId: string) {\n        return instance.get(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n\n    deleteTask(todolistId: string, taskId: string) {\n\n        return instance.delete(`todo-lists/${todolistId}/tasks/${taskId}`)\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n    }\n\n}\n// export const authAPI = {\n//     me() {\n//         return instance.get<ResponseType<AuthMeType>>(\"auth/me\")\n//     },\n//     login(data:LoginParamsType){\n//         return instance.post<ResponseType<{userId?:string}>>(\"auth/login\",data)\n//     },\n//     logout(){\n//         return instance.delete<ResponseType>(`auth/login`);\n//     }\n// }\nexport const auth = {\n    authMe(){\n        return instance.get<ResponseType<{id:number,email:string,login:string}>>(`auth/me`)\n    },\n    login(data:loginType){\n        return instance.post<ResponseType<{userId?:number}>>(`auth/login`,data)\n    },\n    logOut(){\n        return instance.delete<ResponseType<{userId?:number}>>(`auth/login`)\n    }\n}\n\n\n\n// types\nexport type loginType = {\n    email:string\n    password:string\n    rememberMe:boolean\n    captcha?:string\n}\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\ntype getTaksResponse = {\n    totalCount: string\n    error: string | null\n    task: TaskType[]\n\n}\nexport type UpdateTaskType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\ntype CreateTodolistResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {\n        item: TodolistType\n    }\n}\ntype UpdateTodolistResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {}\n}\ntype DeleteTodolistResponseType = {\n    resultCode: number\n    messages: Array<string>\n    data: {}\n}\nexport type ResponseType<D = {}> = {//если D не передавать то он будет путым объектом\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\nexport enum TaskStatuses {\n    New = 0,\n    inProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\n\n\n\n\n\n\n\n\n\n\n","import {TodolistType} from \"../api/todolists-api\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialized: false\n}\n\nconst slice = createSlice({\n    name: 'app',\n    initialState: initialState,\n    reducers: {\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\n            state.error = action.payload.error\n        },\n        setAppStatusAC(state, action: PayloadAction<{ status: 'idle' | 'loading' | 'succeeded' | 'failed' }>) {\n            state.status = action.payload.status\n        },\n        setInitializedAC(state, action: PayloadAction<{ value: boolean }>) {\n            state.isInitialized = action.payload.value\n        }\n    }\n})\nexport const setAppErrorAC = slice.actions.setAppErrorAC\nexport const setAppStatusAC = slice.actions.setAppStatusAC\nexport const setInitializedAC = slice.actions.setInitializedAC\n\nexport const appReducer = slice.reducer\n//     (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n//     switch (action.type) {\n//         case 'APP/SET-STATUS':\n//             return {...state, status: action.status}\n//         case 'APP/SET-ERROR':\n//             return {...state, error:action.error}\n//         case \"APP/SET-INITIALIZED\":\n//             return {...state,isInitialized:action.value}\n//         default:\n//             return {...state}\n//     }\n// }\n// export const setAppErrorAC = (error: string | null) => {\n//     return {type: 'APP/SET-ERROR', error} as const\n// }\n// export const setAppStatusAC = (status: RequestStatusType) => {\n//     return {type: 'APP/SET-STATUS', status} as const\n// }\n// export const setInitializedAC = (value: boolean) => {\n//     return {type: 'APP/SET-INITIALIZED', value} as const\n// }\n// type ActionsType = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>\n//     | ReturnType<typeof setInitializedAC>\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nexport type InitialStateType = {\n    // происходит ли сейчас взаимодействие с сервером\n    status: RequestStatusType,\n    //если глобальная произойдет мы запишем текст ошибки сюда\n    error: string | null,\n    //true когда приложение проинициализировалось(проверили юзера, настройки)\n    isInitialized: boolean\n}\nexport type setAppStatusActionType = ReturnType<typeof setAppErrorAC> | ReturnType<typeof setAppStatusAC>| ReturnType<typeof setInitializedAC>\n","import {v1} from \"uuid\";\nimport {todolistAPI, TodolistType} from \"../../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {RequestStatusType, setAppStatusActionType, setAppErrorAC, setAppStatusAC} from \"../../../app/app-reducer\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\nexport let todolistId1 = v1();\nexport let todolistId2 = v1();\n\nconst initialState: Array<TodolistDomainType> = []\n\nconst slice = createSlice({\n    name: 'todolists',\n    initialState: initialState,\n    reducers: {\n        removeTodolistAC(state, action: PayloadAction<{id: string}>) {\n            // state.filter(tl => tl.id != action.payload.id)\n            //нашли индекс, а именно номер тудулиста\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            //если индекс минус один не равно минус один, т е нашелся элемент, то можем удалить из стейта сплайсом индекс 1\n            if (index > -1){\n                state.splice(index,1)\n            }\n        },\n        addTodolistAC(state, action: PayloadAction<{todolist: TodolistType}>) {\n\n            //снгачала испольховдаи метот PUSH но как оказалось она добавляет в конец\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\n        },\n        changeTodolistTitleAC(state, action: PayloadAction<{id: string, title: string}>) {\n            //нашли индекс, а именно номер тудулиста\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].title=action.payload.title\n            // let todolistTasks = state.find(tl => tl.id === action.payload.id)\n            // if (todolistTasks){\n            //     todolistTasks.title = action.payload.title\n            // }\n        },\n        changeTodolistFilterAC(state, action: PayloadAction<{filter: FilterValuesType, id: string}>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].filter=action.payload.filter\n        },\n        setTodilistAC(state, action: PayloadAction<{todoList: Array<TodolistType>}>) {\n            return action.payload.todoList.map((tl: any) => {\n                return {...tl, filter: \"all\", entityStatus: 'idle'}\n            })\n        },\n        changeTodilistEntitiyStatusAC(state, action: PayloadAction<{id: string, entityStatus: RequestStatusType}>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].entityStatus=action.payload.entityStatus\n        },\n\n    }\n})\n\n\nexport const todolistsReducer = slice.reducer\n// (state: Array<TodolistDomainType> = initialState, action: ActionTypes): Array<TodolistDomainType> => {\n//     switch (action.type) {\n//\n//         case \"REMOVE-TODOLIST\": {\n//             return state.filter(tl => tl.id != action.id);\n//         }\n//         case  \"ADD-TODOLIST\": {\n//             const newTodoList: TodolistDomainType = {...action.todolist, filter: 'all', entityStatus: 'idle'}\n//             return [newTodoList, ...state]\n// //         }\n//         case 'CHANGE-TODOLIST-TITLE': {\n//             debugger\n//             let todolistTasks = state.find(tl => tl.id === action.id)\n//             if (todolistTasks) {\n//                 todolistTasks.title = action.title;\n//             }\n//             return [...state]\n//         }\n//         case 'CHANGE-TODOLIST-FILTER': {\n//             return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n//         }\n//         case \"CHANGE-TODOLIST-ENTITY-STATUS\":\n//             return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\n//\n//         case \"SET-TODOLIST\": {\n//             return action.todoList.map((tl: any) => {\n//                 return {...tl, filter: \"all\", entityStatus: 'idle'}\n//             })\n//         }\n//\n//\n//         default:\n//             return state\n//     }\n// }\n\n// actions\n\nexport const removeTodolistAC = slice.actions.removeTodolistAC\nexport const addTodolistAC = slice.actions.addTodolistAC\nexport const changeTodolistTitleAC = slice.actions.changeTodolistTitleAC\nexport const changeTodolistFilterAC = slice.actions.changeTodolistFilterAC\nexport const setTodilistAC = slice.actions.setTodilistAC\nexport const changeTodilistEntitiyStatusAC = slice.actions.changeTodilistEntitiyStatusAC\n\n\n\n//thunks\nexport const fetchTodoListTC = () => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: \"loading\"}))\n        todolistAPI.getTodolist()\n            .then((res) => {\n                debugger\n                dispatch(setTodilistAC({todoList:res.data}))\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\n\n            })\n            .catch((error) => {\n                dispatch(setAppErrorAC(error.message))\n                dispatch(setAppStatusAC({status: 'failed'}))\n            })\n    }\n}\n\nexport const removeTodoListTC = (todolistId: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: \"loading\"}))\n        dispatch(changeTodilistEntitiyStatusAC({id:todolistId, entityStatus:'loading'}))\n\n        todolistAPI.deleteTodolist(todolistId)\n            .then((res) => {\n                dispatch(removeTodolistAC({id:todolistId}))\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\n            })\n    }\n}\n\nexport const addTodoListTC = (title: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: 'loading'}))\n        todolistAPI.createTodolist(title)\n            .then((res) => {\n                debugger\n                dispatch(addTodolistAC({todolist:res.data.data.item}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            })\n    }\n}\n\nexport const changeTodolistTC = (todolistId: string, title: string) => {\n    debugger\n    return (dispatch: Dispatch) => {\n        todolistAPI.updateTodolist(todolistId, title)\n            .then((res) => {\n                dispatch(changeTodolistTitleAC({id:todolistId, title:title}))\n            })\n    }\n}\n\n// types\n\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\nexport type SetTodolistActionType = ReturnType<typeof setTodilistAC>\n// type ActionTypes =\n//     ReturnType<typeof RemoveTodolistAC>\n//     | ReturnType<typeof addTodolistAC>\n//     | ReturnType<typeof changeTodolistAC>\n//     | ReturnType<typeof changeTodolistFilterAC>\n//     | ReturnType<typeof setTodilistAC>\n//     // |   ReturnType<typeof setAppStatusAC>\n//     // |   ReturnType<typeof setAppErrorAC>\n//     | ReturnType<typeof changeTodilistEntitiyStatusAC>\n\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\n// type ThunkDispatchType = Dispatch<ActionTypes | setAppStatusActionType>\n\n\n","import {setAppErrorAC, setAppStatusAC, setAppStatusActionType} from '../app/app-reducer';\nimport { Dispatch } from 'redux';\nimport { ResponseType } from '../api/todolists-api';\n\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n    if (data.messages.length) {\n        let message = data.messages[0]\n        dispatch(setAppErrorAC({error:message}))\n    } else {\n        dispatch(setAppErrorAC({error:'some error occured'}))\n        dispatch(setAppStatusAC({status:'failed'}))\n    }\n}\n\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\n    dispatch(setAppErrorAC({error:error.message? error.message: 'some error was occured'}))\n    dispatch(setAppStatusAC({status:'failed'}))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<setAppStatusActionType>","import {\n    addTodolistAC,\n    AddTodolistActionType,\n    setTodilistAC,\n    SetTodolistActionType,\n    removeTodolistAC,\n    FilterValuesType\n} from \"../todolists-reducer\";\nimport {\n    taskAPI,\n    TaskPriorities,\n    TaskStatuses,\n    TaskType,\n    TodolistType,\n    UpdateTaskType\n} from \"../../../../api/todolists-api\";\nimport {Dispatch} from \"redux\";\nimport {AppRootStateType} from \"../../../../app/store\";\nimport {RequestStatusType, setAppErrorAC, setAppStatusAC} from \"../../../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {action} from \"@storybook/addon-actions\";\n\n\nlet initialState: TasksStateType = {}\n\n\nconst slice = createSlice({\n    name: 'tasks',\n    initialState: initialState,\n    reducers: {\n\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todolistId: string }>) {\n            const tasks = state[action.payload.todolistId]\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\n            if (index > -1) {\n                tasks.splice(index, 1)\n            }\n        },\n        addTaskAC(state, action: PayloadAction<{\n            // todolistId: string,\n            task: TaskType\n        }>) {\n            state[action.payload.task.todoListId].unshift(action.payload.task)\n        },\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) {\n            const tasks = state[action.payload.todolistId]\n            const index = tasks.findIndex(task => task.id === action.payload.taskId)\n            if (index > -1) {\n                tasks[index] = {...tasks[index], ...action.payload.model}\n            }\n        },\n        setTaskAC(state, action: PayloadAction<{ tasks: Array<TaskType>, todoListId: string }>) {\n            state[action.payload.todoListId] = action.payload.tasks\n        }\n    },\n    extraReducers: ((builder) => {\n        builder.addCase(addTodolistAC, (state, action) => {\n            state[action.payload.todolist.id] = [];\n        });\n        builder.addCase(removeTodolistAC, (state, action) => {\n            delete state[action.payload.id];\n        });\n        builder.addCase(setTodilistAC, (state, action) => {\n            action.payload.todoList.forEach((tl: any) => {\n                state[tl.id] = []\n            });\n        })\n    })\n})\n\n\nexport const tasksReducer = slice.reducer\nexport const removeTaskAC = slice.actions.removeTaskAC\nexport const addTaskAC = slice.actions.addTaskAC\nexport const updateTaskAC = slice.actions.updateTaskAC\nexport const setTaskAC = slice.actions.setTaskAC\n\n\nexport const getTaskTC = (todoListId: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: 'loading'}))\n        taskAPI.getTask(todoListId)\n            .then((res) => {\n                dispatch(setTaskAC({tasks: res.data.items, todoListId: todoListId}))\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\n            })\n    }\n}\n\nexport const deleteTaskTC = (taskId: string, todoListId: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: 'loading'}))\n        taskAPI.deleteTask(todoListId, taskId)\n            .then((res) => {\n\n                dispatch(removeTaskAC({taskId:taskId,todolistId: todoListId}))\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\n            })\n    }\n}\nexport const createTaskTC = (title: string, todolistId: string) => {\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: 'loading'}))\n        taskAPI.createTask(todolistId, title)\n            .then((res) => {\n                if (res.data.resultCode === 0) {\n                    const tasks = res.data.data.item\n                    const action = addTaskAC(   {\n                        // todolistId:todolistId,\n                        task:tasks})\n                    dispatch(action)\n                    dispatch(setAppStatusAC({status: \"succeeded\"}))\n                } else {\n                    if (res.data.messages.length) {\n                        let message = res.data.messages[0]\n                        dispatch(setAppErrorAC({error: message}))\n                    } else {\n                        dispatch(setAppErrorAC({error: 'some error occured'}))\n                        dispatch(setAppStatusAC({status: 'failed'}))\n                    }\n                }\n            })\n            .catch((error) => {\n                dispatch(setAppErrorAC(error.message))\n                dispatch(setAppStatusAC({status: 'failed'}))\n            })\n    }\n}\n\n\nexport const changeTaskStatusTC = (title: string, todolistId: string) => {\n\n    return (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status: 'loading'}))\n        taskAPI.createTask(todolistId, title)\n\n            .then((res) => {\n\n                const tasks = res.data.data.item\n                const action = addTaskAC({\n                    // todolistId:todolistId,\n                    task:tasks})\n                dispatch(action)\n                dispatch(setAppStatusAC({status: \"succeeded\"}))\n            })\n    }\n}\n\n\nexport const updateTaskTC = (taskId: string, domainModelMy: UpdateDomainTaskModelType, todolistId: string) => {\n\n    return (dispatch: Dispatch, getState: () => AppRootStateType) => {\n\n        const state = getState();\n        const task = state.tasks[todolistId].find(t => t.id);\n        if (!task) {\n            console.warn('таска не найдена')\n            return;\n        }\n        const model: UpdateTaskType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModelMy\n        }\n        taskAPI.updateTask(todolistId, taskId, model)\n            .then((res) => {\n                if (res.data.resultCode === 0) {\n                    const action = updateTaskAC({taskId:taskId,model: domainModelMy,todolistId: todolistId})\n                    dispatch(action)\n\n                } else {\n                    handleServerAppError(res.data, dispatch)\n\n                }\n\n\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch)\n\n            })\n    }\n}\n\n\n//types\n\n\ntype ActionTypes =\n    ReturnType<typeof addTaskAC>\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    // | ReturnType<typeof changeTaskTitleAC>\n    // | ReturnType<typeof RemoveTodolistAC>\n    | AddTodolistActionType\n    | ReturnType<typeof setTaskAC>\n    | SetTodolistActionType\n    | ReturnType<typeof setTodilistAC>\n\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}","import React, {ChangeEvent, KeyboardEvent, useCallback, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\n\ntype AddItemFormType = {\n    addItem: (title: string) => void\n    disabled?:boolean\n}\n\nconst AddItemForm = React.memo((props:AddItemFormType)=>{\n    console.log('add item form')\n    let [title, setTitle] = useState(\"\")\n    let [error, setError] = useState<string | null>(null)\n\n\n    const addItemHandler = () => {\n\n        if (title.trim() !== \"\") {\n            props.addItem(title);\n            setTitle(\"\");\n        } else {\n            setError(\"Title is required\");\n        }\n    }\n\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    },[])\n    const onKeyPressHandler = useCallback((e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null){\n            setError(null);\n        }\n\n        if (e.charCode === 13) {\n            addItemHandler();\n        }\n    },[])\n\n    return (\n\n\n        <div>\n            <TextField\n                variant=\"outlined\"\n                value={title}\n                disabled={props.disabled}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   error={!!error}\n                label=\"Title\"\n                helperText={error}\n            />\n            {/*<Button*/}\n            {/*    variant=\"contained\"*/}\n            {/*    color=\"primary\"*/}\n            {/*    onClick={addItem}*/}\n            {/*>+</Button>*/}\n\n\n            <IconButton color=\"primary\" onClick={addItemHandler}\n                        disabled={props.disabled}>\n                <AddBox />!\n            </IconButton>\n            {/*{error && <div className=\"error-message\">{error}</div>}*/}\n        </div>\n    )\n})\n\n\nexport default AddItemForm;","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\n\ntype EditableSpanType = {\n    title: string\n    saveTitle: (newTitle: string) => void\n}\n\n\nconst EditableSpan = React.memo((props: EditableSpanType) => {\n    console.log(\"Ediable span\")\n    let [editMode, setEditMode] = useState<boolean>(false);\n    let [title, setTitle] = useState(props.title)\n    const activatedEditMode = () => {\n        setEditMode(true);\n\n    }\n    const disActivatedEditMode = () => {\n        setEditMode(false);\n        props.saveTitle(title)\n        setTitle(\"\")\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n\n    return (\n        editMode\n            ? <TextField\n                variant=\"outlined\"\n                value={title}\n                onChange={changeTitle}\n                autoFocus={true}\n                onBlur={disActivatedEditMode}/>\n            : <span onDoubleClick={activatedEditMode}>{props.title}</span>\n    )\n})\n\nexport default EditableSpan","import React, {ChangeEvent, useCallback} from \"react\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {TaskStatuses, TaskType} from \"../../../../api/todolists-api\";\n\n\ntype TaskPropsType = {\n    tasks: TaskType\n    removeTask: (taskId: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status:TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (title: string, id: string, todolistId: string) => void\n    taskId: string\n\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n\n    const onClickHandler = () => props.removeTask(props.tasks.id, props.taskId)\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked;\n        props.changeTaskStatus(props.tasks.id, newIsDoneValue? TaskStatuses.Completed:TaskStatuses.New, props.taskId);\n    }\n    const onTitleChangeHandler = useCallback((newTitle: string) => {\n        props.changeTaskTitle(props.tasks.id, newTitle, props.taskId);\n    },[props.changeTaskTitle,props.tasks.id,props.taskId])\n\n    return <div key={props.tasks.id} className={props.tasks.status === TaskStatuses.Completed? \"is-done\" : \"\"}>\n        <Checkbox color=\"primary\" onChange={onChangeHandler} checked={props.tasks.status === TaskStatuses.Completed}/>\n        <EditableSpan title={props.tasks.title} saveTitle={onTitleChangeHandler}/>\n\n\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})","import React, {useCallback, useEffect} from 'react';\r\nimport AddItemForm from \"./../../../components/AddItemForm/AddItemForm\";\r\nimport EditableSpan from \"./../../../components/EditableSpan/EditableSpan\"\r\nimport {Button, IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Task} from './Task/Task';\r\nimport {TaskStatuses, TaskType} from \"./../../../api/todolists-api\";\r\nimport {FilterValuesType, TodolistDomainType} from \"./todolists-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {getTaskTC} from \"./Task/tasks-reducer\";\r\n\r\n// export type TaskType = {\r\n//     id: string\r\n//     title: string\r\n//     status:TaskStatuses\r\n// }\r\n\r\ntype PropsType = {\r\n    todolist:TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status:TaskStatuses, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTaskTitle: (title: string, id: string, todolistId: string) => void\r\n    ChangeTOD: (newTitle: string, todolistID: string) => void,\r\n    demo?:boolean\r\n}\r\n\r\nexport const Todolist = React.memo(({demo=false,...props}:PropsType) => {//такая запись DEMO\r\n    console.log('todolist')\r\n   // if (typeof props.demo === 'undefined') props.demo = false // такая запись\r\n\r\nconst dispatch = useDispatch()\r\n\r\n    useEffect(()=>{\r\n        if (demo){return\r\n        }\r\n        dispatch(getTaskTC(props.todolist.id))\r\n    },[])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n// const removeTodolist = () => props.removeTodolist(props.id)\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.todolist.id), [props.changeFilter, props.todolist.id]);\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.todolist.id), [props.changeFilter, props.todolist.id]);\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.todolist.id), [props.changeFilter, props.todolist.id]);\r\n    const deleteTodolist = useCallback(() => props.removeTodolist(props.todolist.id), [props.removeTodolist, props.todolist.id])\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.ChangeTOD(title, props.todolist.id)\r\n    }, [props.todolist.id])\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === \"active\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New);\r\n    }\r\n    if (props.todolist.filter === \"completed\") {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed);\r\n    }\r\n\r\n    return <div>\r\n\r\n        <h3>\r\n            <EditableSpan title={props.todolist.title} saveTitle={changeTodolistTitle}/>\r\n\r\n            <IconButton onClick={deleteTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t =>\r\n                    <Task changeTaskTitle={props.changeTaskTitle}\r\n                          changeTaskStatus={props.changeTaskStatus}\r\n                          removeTask={props.removeTask}\r\n                          tasks={t}\r\n                          taskId={props.todolist.id}\r\n                          key={t.id}/>\r\n                )\r\n            }\r\n        </div>\r\n        <div>\r\n            <Button variant={props.todolist.filter === 'all' ? \"contained\" : \"text\"}\r\n                    onClick={onAllClickHandler}\r\n                    color=\"inherit\"\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? \"contained\" : \"text\"}\r\n                    onClick={onActiveClickHandler}\r\n                    color=\"primary\"\r\n            >Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? \"contained\" : \"text\"}\r\n                    onClick={onCompletedClickHandler}\r\n                    color=\"secondary\"\r\n            >Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../app/store\";\nimport {\n    addTodoListTC,\n    changeTodolistFilterAC,\n    changeTodolistTC,\n    fetchTodoListTC,\n    FilterValuesType, removeTodoListTC,\n    TodolistDomainType\n} from \"./todolists-reducer\";\nimport {createTaskTC, deleteTaskTC, TasksStateType, updateTaskTC} from \"./Task/tasks-reducer\";\nimport {TaskStatuses} from \"../../../api/todolists-api\";\nimport {Grid} from \"@material-ui/core\";\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {Todolist} from \"./TodoList\"\nimport { Redirect } from \"react-router-dom\";\n\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\n    const dispatch = useDispatch();\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n\n    // useEffect(() => {\n    //     if (demo||!isInitialized) {\n    //         return\n    //     }\n    //     dispatch(fetchTodoListTC())\n    // }, [])\n    useEffect(() => {\n        if (demo||!isLoggedIn) {\n            return\n        }\n        dispatch(fetchTodoListTC())\n    }, [])\n\n    const removeTask = useCallback((id: string, todolistId: string) => {\n\n        dispatch(deleteTaskTC(id, todolistId))\n    }, [dispatch])\n    const addTask = useCallback((title: string, todolistId: string) => {\n\n        dispatch(createTaskTC(title, todolistId))\n    }, [dispatch])\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\n        const thunk = updateTaskTC(id, {status}, todolistId)\n        dispatch(thunk)\n    }, [dispatch])\n    const changeTaskTitle = useCallback((id: string, title: string, todolistId: string) => {\n        const action = updateTaskTC(id, {title}, todolistId)\n        dispatch(action)\n\n\n    }, [dispatch])\n    const ChangeTOD = useCallback((newTitle: string, todolistID: string) => {\n\n        const thunk = changeTodolistTC(todolistID, newTitle)\n        dispatch(thunk)\n    }, [dispatch])\n    const changeFilter = useCallback((value: FilterValuesType, todolistId: string) => {\n        dispatch(changeTodolistFilterAC({filter:value, id:todolistId}))\n    }, [dispatch])\n    const removeTodolist = useCallback((id: string) => {\n\n        dispatch(removeTodoListTC(id))\n\n\n    }, [dispatch])\n    const addTodoList = useCallback((title: string) => {\n\n        dispatch(addTodoListTC(title))\n\n\n    }, [dispatch])\n\n    if (!isLoggedIn){\n        return <Redirect to={'/login'}/>\n    }\n    return <> <Grid container style={{padding: \"10px\"}}>\n        <AddItemForm addItem={addTodoList}/>\n    </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id];\n                    let tasksForTodolist = allTodolistTasks;\n\n                    return <Grid item>\n                        <Paper style={{padding: \"10px\"}}>\n                            <Todolist\n                                key={tl.id}\n                                todolist={tl}\n                                tasks={tasksForTodolist}\n                                removeTask={removeTask}\n                                changeFilter={changeFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeStatus}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                ChangeTOD={ChangeTOD}\n                                demo={demo}\n                            />\n                        </Paper>\n                    </Grid>\n                })\n            }\n        </Grid></>\n}\n","import React from 'react';\n\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\n\nfunction Alert(props: any) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\n\nexport function ErrorSnackbar() {\n\n\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n   const dispatch = useDispatch()\n\n    const handleClick = () => {\n        //setOpen(true);\n    };\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC({error:null}))\n\n    };\n\n    const isOpen = error !== null\n\n    return (\n        <Snackbar open={isOpen} autoHideDuration={3000} onClose={handleClose}>\n            <Alert onClose={handleClose}>{error}</Alert>\n        </Snackbar>\n\n\n    );\n}","import {setAppErrorAC, setAppStatusAC, setInitializedAC} from \"../../app/app-reducer\";\nimport {Dispatch} from \"redux\";\nimport {auth, loginType, todolistAPI} from \"../../api/todolists-api\";\nimport {setTodilistAC} from \"../TodolistsList/Todolist/todolists-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\n\nconst initialState: InitialStateType = {\n    isLoggedIn: false\n}\n\n\n\n\nconst slice = createSlice({\n    name: 'auth',\n    initialState: initialState,\n    reducers: {\n        setIsLoggedAC(state,action:PayloadAction<{value:boolean}>){\n            state.isLoggedIn=action.payload.value\n        }\n    }\n})\nexport const setIsLoggedAC = slice.actions.setIsLoggedAC\nexport const authReducer = slice.reducer\n//     (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n//     switch (action.type) {\n//         case \"login/SET-IS-LOGGED-IN\":\n//             return {...state, isLoggedIn: action.value}\n//         default:\n//             return state\n//     }\n// }\n\n\n//actions\n// const setIsLoggedAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n//thunk\n\nexport const initializedAppTC = () => (dispatch: Dispatch) => {\n    auth.authMe().then((res) => {\n        if (res.data.resultCode === 0) {\n            dispatch(slice.actions.setIsLoggedAC({value:true}))\n\n        } else {\n\n        }\n        dispatch(setInitializedAC({value:true}))\n    })\n}\nexport const loginTC = (data: loginType) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status:'loading'}))\n    auth.login(data)\n        .then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(slice.actions.setIsLoggedAC({value:true}))\n                dispatch(setAppStatusAC({status:'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\nexport const logoutTC = () => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status:'loading'}))\n    auth.logOut()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(slice.actions.setIsLoggedAC({value:false}))\n                dispatch(setAppStatusAC({status:'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n// export const fetchTodoListTC = () => {\n//     return (dispatch: ThunkDispatchType) => {\n//         dispatch(setAppStatusAC(\"loading\"))\n//         todolistAPI.getTodolist()\n//             .then((res) => {\n//                 dispatch(setTodilistAC(res.data))\n//                 dispatch(setAppStatusAC(\"succeeded\"))\n//             })\n//     }\n// }\n\n\n//types\n\n\ntype InitialStateType = {\n    isLoggedIn: boolean\n}\n// export type ActionsType = ReturnType<typeof setIsLoggedAC> | ReturnType<typeof setAppErrorAC>\ntype InitializedType = ReturnType<typeof setInitializedAC>\n\nexport type setAppStatusActionType = ReturnType<typeof setAppStatusAC>\n// type ThunkDispatchType = Dispatch<ActionsType | setAppStatusActionType | InitializedType>","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {Redirect} from \"react-router-dom\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\n\n\n\n\n\nexport const Login = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n    const formik = useFormik({\n        validate :(values: any) => {\n            const errors: any = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            return errors;\n        },\n\n        // validate:(values) => {\n        //     if (!values.email){\n        //         return {\n        //             email:'not correct email'\n        //         }\n        //     }\n        //     if (!values.password){\n        //         return {\n        //             email:'not correct password'\n        //         }\n        //     }\n        // },\n            initialValues: {\n                email: '',\n                password:'',\n                rememberMe:false\n            },\n            onSubmit: values => {\n            dispatch(loginTC(values))\n            },\n        })\n    if (isLoggedIn){\n        return <Redirect to={'/'}/>\n    }\n\n\n    return (<Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n            <FormControl>\n                <FormLabel>\n                    <p>To log in get registered\n                        <a href={'https://social-network.samuraijs.com/'}\n                           target={'_blank'}>here\n                        </a>\n                    </p>\n                    <p>or use common test account credentials:</p>\n                    <p>Email: free@samuraijs.com</p>\n                    <p>Password: free</p>\n                </FormLabel>\n\n                <FormGroup>\n                    <TextField\n                        label=\"Email\"\n                        margin=\"normal\"\n                        {...formik.getFieldProps('email')}\n                    />\n                    {formik.errors.email ? <div>{formik.errors.email}</div> : null}\n                    <TextField\n                        type=\"password\"\n                        label=\"Password\"\n                        margin=\"normal\"\n                        {...formik.getFieldProps('password')}\n                    />\n                    {formik.errors.password ? <div>{formik.errors.password}</div> : null}\n                    <FormControlLabel\n                        label={'Remember me'}\n                        control={<Checkbox\n                            {...formik.getFieldProps('RememberMe')}/>}\n                        checked={formik.values.rememberMe}\n\n                    />\n                    <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                </FormGroup>\n            </FormControl>\n            </form>\n        </Grid>\n    </Grid>)\n}\n","import React, {useCallback, useEffect} from 'react';\nimport './App.css';\n\nimport {\n    AppBar,\n    Toolbar,\n    IconButton,\n    Typography,\n    Button,\n    Container,\n    LinearProgress,\n    CircularProgress\n} from \"@material-ui/core\";\nimport {Menu} from \"@material-ui/icons\"\nimport {TodolistsList} from \"../features/TodolistsList/Todolist/TodolistsList\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./store\";\nimport {RequestStatusType} from \"./app-reducer\";\n\nimport {ErrorSnackbar} from \"../components/errorSnackBar/ErrorSnackbar\";\nimport {BrowserRouter, Route} from \"react-router-dom\";\nimport {Login} from \"../features/Login/Login\";\nimport {initializedAppTC, logoutTC} from \"../features/Login/auth-reducer\";\n\n\n// export type TasksStateType = {\n//     [key: string]: Array<TaskType>\n// }\ntype PropsType = {\n    demo?: boolean\n}\n\nconst App = React.memo(({demo = false}: PropsType) => {\n    console.log('APP with REDUX')\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(initializedAppTC())\n    },[])\n    const logoHandler=useCallback(()=>{\n        dispatch(logoutTC())\n    },[])\n    // if (!isInitialized) { Колесо загрузки, на гите оно постоянно крутится\n    //     return <div\n    //         style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n    //         <CircularProgress/>\n    //     </div>\n    // }\n\n    return (\n        // <BrowserRouter>\n            <div className=\"App\">\n                <ErrorSnackbar/>\n                <AppBar position=\"static\">\n\n                    <Toolbar>\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                            <Menu/>\n                        </IconButton>\n                        <Typography variant=\"h6\">\n                            News\n                        </Typography>\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoHandler}>Log out</Button>}\n\n                    </Toolbar>\n                    {status === 'loading' && <LinearProgress/>}\n\n                </AppBar>\n\n                <Container fixed>\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\n                    <Route path={'/login'} render={() => <Login/>}/>\n\n\n                </Container>\n\n\n            </div>\n        // </BrowserRouter>\n\n\n    );\n})\n\nexport default App;\n\n","import {tasksReducer} from \"../features/TodolistsList/Todolist/Task/tasks-reducer\"\nimport {todolistsReducer} from '../features/TodolistsList/Todolist/todolists-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\nimport {configureStore} from \"@reduxjs/toolkit\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer\n})\n// непосредственно создаём store\n//export const store = createStore(rootReducer,applyMiddleware(thunk));\nexport const store = configureStore({\n    reducer: rootReducer,middleware: getDefaultMiddleware =>getDefaultMiddleware().prepend(thunk)\n})\n\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithRedux from './app/App';\r\nimport { store } from './app/store';\r\nimport {Provider} from \"react-redux\"\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <AppWithRedux />\r\n        </BrowserRouter>\r\n\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}